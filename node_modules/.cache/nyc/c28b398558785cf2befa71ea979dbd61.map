{"version":3,"sources":["app.js"],"names":["app","router","express","Router","use","bodyParser","urlencoded","extended","json","get","req","res","db","users","map","parcel","status","send","success","message","parcels","post","body","id","weight","username","emailAddress","pickup","phone","picker","emailOfPicker","phoneOfPicker","destination","singleParcels","push","parseInt","params","singleParcel","put","par","Object","assign","user","name","email","country","pasword","PORT","listen"],"mappings":"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","file":"app.js","sourceRoot":"/Users/andela/SendIT","sourcesContent":["import express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport db from './db/db';\r\n\r\nconst app = express();\r\nconst router = express.Router();\r\n\r\napp.use(bodyParser.urlencoded({\r\n\textended: false,\r\n}));\r\napp.use(bodyParser.json());\r\n\r\n\r\n//\tGet all the delivery order parcels\r\nrouter.get('/v1/parcels', (req, res) => {\r\n\tdb.users.map((parcel) => {\r\n\t\t res.status(200).send({\r\n\t\t\tsuccess: true,\r\n\t\t\tmessage: 'user retrieved successfully',\r\n\t\t\tparcel: parcel.parcels,\r\n\t\t});\r\n\t});\r\n});\r\n\r\n//\tCreate a delivery order parcel\r\nrouter.post('/v1/parcels', (req, res) => {\r\n\tif (!req.body) {\r\n\t\t res.status(400).send({\r\n\t\t\tsuccess: false,\r\n\t\t\tmessage: 'Enter the fields correctly',\r\n\t\t});\r\n\t}\r\n\r\n\tconst parcel = {\r\n\t\tid: req.body.id,\r\n\t\tweight: req.body.weight,\r\n\t\tusername: req.body.username,\r\n\t\temailAddress: req.body.emailAddress,\r\n\t\tpickup: req.body.pickup,\r\n\t\tphone: req.body.phone,\r\n\t\tpicker: req.body.picker,\r\n\t\temailOfPicker: req.body.emailOfPicker,\r\n\t\tphoneOfPicker: req.body.phoneOfPicker,\r\n\t\tdestination: req.body.destination,\r\n\t\tstatus: req.body.status,\r\n\r\n\t};\r\n\tdb.users.map((singleParcels) => {\r\n\t\t singleParcels.parcels.push(parcel);\r\n\t});\r\n\t res.status(201).send({\r\n\t\tsuccess: true,\r\n\t\tmessage: 'user created successsfully',\r\n\t\tparcel,\r\n\r\n\t});\r\n});\r\n\r\n//\tGet a particular delivery order parcel\r\nrouter.get('/v1/parcels/:id', (req, res) => {\r\n\tconst id = parseInt(req.params.id, 10);\r\n\tdb.users.map((parcel) => {\r\n\t\t parcel.parcels.map((singleParcel) => {\r\n\t\t\tif (singleParcel.id === id) {\r\n\t\t\t\t res.status(200).send({\r\n\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\tmessage: 'parcel retrieved successfully',\r\n\t\t\t\t\tparcel: singleParcel,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t res.status(404).send({\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tmessage: 'parcel does not exist',\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n});\r\n\r\n//\tCancel a particular delivery order parcel\r\nrouter.put('/v1/parcels/:id/cancel', (req, res) => {\r\n\tconst id = parseInt(req.params.id, 10);\r\n\r\n\tdb.users.map((parcel) => {\r\n\t\t parcel.parcels.map((singleParcel) => {\r\n\t\t\tif (singleParcel.id === id) {\r\n\t\t\t\tconst par = Object.assign({}, singleParcel);\r\n\t\t\t\tpar.status = req.body.status || singleParcel.status;\r\n\t\t\t\t res.status(201).send({\r\n\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\tmessage: 'Parcel updated successfully',\r\n\t\t\t\t\tparcel: singleParcel,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t res.status(404).send({\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tmessage: 'parcel not found',\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n});\r\n\r\nrouter.get('/v1/users/:id/parcels', (req, res) => {\r\n\tconst id = parseInt(req.params.id, 10);\r\n\tdb.users.map((singleParcel) => {\r\n\t\tif (singleParcel.id === id) {\r\n\t\t\t res.status(200).send({\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\tmessage: 'parcels retrieved successfully',\r\n\t\t\t\tparcel: singleParcel.parcels,\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n});\r\n\r\nrouter.put('/v1/parcels/:id/edit', (req, res) => {\r\n\tconst id = parseInt(req.params.id, 10);\r\n\r\n\tdb.users.map((parcel) => {\r\n\t\t parcel.parcels.map((singleParcel) => {\r\n\t\t\tif (singleParcel.id === id) {\r\n\t\t\t\tconst par = Object.assign({}, singleParcel);\r\n\t\t\t\tpar.destination = req.body.destination || singleParcel.destination;\r\n\t\t\t\t res.status(201).send({\r\n\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\tmessage: 'Parcel updated successfully',\r\n\t\t\t\t\tparcel: singleParcel,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t res.status(404).send({\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tmessage: 'parcel not found',\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n});\r\n\r\nrouter.post('/v1/users', (req, res) => {\r\n\tif (!req.body) {\r\n\t\t res.status(400).send({\r\n\t\t\tsuccess: false,\r\n\t\t\tmessage: 'Enter the fields correctly',\r\n\t\t});\r\n\t}\r\n\r\n\tconst user = {\r\n\t\tid: req.body.id,\r\n\t\tname: req.body.name,\r\n\t\temail: req.body.email,\r\n\t\tcountry: req.body.country,\r\n\t\tphone: req.body.phone,\r\n\t\tpasword: req.body.pasword,\r\n\t\tparcels: [],\r\n\r\n\t};\r\n\tdb.users.push(user);\r\n\r\n\t res.status(201).send({\r\n\t\tsuccess: true,\r\n\t\tmessage: 'user created successsfully',\r\n\t\tparcel: user,\r\n\r\n\t});\r\n});\r\n\r\n\r\napp.use('/api', router);\r\n\r\nconst PORT = 3000;\r\n\r\napp.listen(PORT);\r\n\r\nexport default app;\r\n"]}